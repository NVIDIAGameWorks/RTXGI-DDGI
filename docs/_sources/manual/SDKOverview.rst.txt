.. _SDKOverview:

.. |reg| unicode:: U+000AE .. REGISTERED SIGN
   :ltrim:

===================
RTXGI SDK Overview
===================

The core of the RTXGI SDK is designed as a container for a number of different global illumination algorithms. With this first release of the SDK, we introduce our implementation of the *Dynamic Diffuse Global Illumination (DDGI)* algorithm, `first described in an academic publication from NVIDIA Research <http://jcgt.org/published/0008/02/01/>`_  along with collaborators at McGill University and the University of Montreal. In addition, the core SDK includes several helpful basic types, enumerations, defines, macros, math operations, and psuedo random number utilities.

---------------------------------------------------
Versioning
---------------------------------------------------

``rtxgi-sdk/include/Common.h`` contains the ``RTXGI_VERSION`` struct, which defines the current version of the SDK. Applications can check the SDK version using either the static ``major``, ``minor``, and ``revision`` values or by comparing against the result of ``getVersionString()``. 

This documentation is for version 1.10.00 of the SDK.

---------------------------------------------------
Types
---------------------------------------------------

``rtxgi-sdk/include/Types.h`` defines several common vector types used by the RTXGI SDK host side code. The following table describes these types:

.. list-table:: RTXGI SDK Vector Types
   :widths: 1 5
   :align: left
   :header-rows: 1

   * - Type
     - Description
   * - ``uint2``, ``uint3``, ``uint4``
     - A vector of two, three, or four 32-bit ``unsigned int`` values
   * - ``int2``, ``int3``, ``int4``
     - A vector of two, three, or four 32-bit ``int`` values
   * - ``float2``, ``float3``, ``float4``
     - A vector of two, three, or four 32-bit ``float`` values
   * - ``float4x4``
     - A vector of four ``float4`` values, representing a each row of a 4x4 matrix
   * - ``AABB``
     - A vector of two ``float3`` values, representing the minimum and maximum world space positions of an axis aligned bounding box

---------------------------------------------------
Enumerations
---------------------------------------------------

``rtxgi-sdk/include/Common.h`` consists of enumerations, structs, and macros for use in host side code.

Many of the public host side functions available in RTXGI return status codes to indicate the result of their execution. The ``ERTXGIStatus`` enumeration is used to communicate that status. The status codes of the enumeration are described in the following tables:

.. list-table:: ERTXGIStatus Codes
   :widths: 1 5
   :align: left
   :header-rows: 1

   * - Status Code
     - Description
   * - ``OK``
     - Execution completed successfully
   * - ``ERROR_DDGI_INVALID_PROBE_COUNTS``
     - An invalid number of probes was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_DESCRIPTOR_HEAP``
     - An invalid pointer to a D3D12 descriptor heap was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_CONSTANT_BUFFER``
     - An invalid pointer to a D3D12 constant buffer was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_MAP_FAILURE_CONSTANT_BUFFER``
     - The constant buffer supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>` wasn't able to be mapped. This typically indicates an invalid constant buffer pointer.

When the **SDK manages resources**, the following status codes are pertinent:

.. list-table:: ERTXGIStatus Codes, SDK Managed Resources
   :widths: 1 5
   :align: left
   :header-rows: 1

   * - Status Code
     - Description
   * - ``ERROR_DDGI_INVALID_D3D_DEVICE``
     - An invalid D3D12 device pointer was supplied in the :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_RADIANCE_BLENDING_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe radiance blending was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_DISTANCE_BLENDING_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe distance blending was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_BORDER_ROW_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe border row updates was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_BORDER_COLUMN_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe border column updates was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_RELOCATION_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe relocation was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_STATE_CLASSIFIER_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe state classification was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_PROBE_STATE_CLASSIFIER_ACTIVATE_ALL_BYTECODE``
     - An invalid pointer to DXIL shader bytecode for probe state classification "activate all" was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_ALLOCATE_FAILURE_RT_RADIANCE_TEXTURE``
     - Failed to allocate GPU memory for a DDGI Volume's probe radiance texture atlas
   * - ``ERROR_DDGI_ALLOCATE_FAILURE_IRRADIANCE_TEXTURE``
     - Failed to allocate GPU memory for a DDGI Volume's probe irradiance texture atlas
   * - ``ERROR_DDGI_ALLOCATE_FAILURE_DISTANCE_TEXTURE``
     - Failed to allocate GPU memory for a DDGI Volume's probe distance texture atlas
   * - ``ERROR_DDGI_ALLOCATE_FAILURE_OFFSETS_TEXTURE``
     - Failed to allocate GPU memory for a DDGI Volume's probe offsets texture atlas
   * - ``ERROR_DDGI_ALLOCATE_FAILURE_STATES_TEXTURE``
     - Failed to allocate GPU memory for a DDGI Volume's probe states texture atlas
   * - ``ERROR_DDGI_CREATE_FAILURE_ROOT_SIGNATURE``
     - Failed to create the D3D12 root signature used for shader execution
   * - ``ERROR_DDGI_CREATE_FAILURE_COMPUTE_PSO``
     - Failed to create a D3D12 compute pipeline state object

When the **application manages resources**, the following status codes are pertinent:

.. list-table:: ERTXGIStatus Codes, Application Managed Resources
   :widths: 1 5
   :align: left
   :header-rows: 1

   * - Status Code
     - Description
   * - ``ERROR_DDGI_INVALID_RESOURCE_ROOT_SIGNATURE``
     - An invalid pointer to the required D3D12 root signature was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_RADIANCE_BLENDING_PSO``
     - An invalid pointer to the required radiance blending pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_DISTANCE_BLENDING_PSO``
     - An invalid pointer to the required distance blending pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_BORDER_ROW_PSO``
     - An invalid pointer to the required border row update pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_BORDER_COLUMN_PSO``
     - An invalid pointer to the required border column update pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_PROBE_RELOCATION_PSO``
     - An invalid pointer to the required probe relocation pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_PROBE_STATE_CLASSIFIER_PSO``
     - An invalid pointer to the required probe state classifier blending pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_PROBE_STATE_CLASSIFIER_ACTIVATE_ALL_PSO``
     - An invalid pointer to the required probe state classifier "activate all" pipeline state object was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_RT_RADIANCE_TEXTURE``
     - An invalid pointer to the required radiance texture resourcewas supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_IRRADIANCE_TEXTURE``
     - An invalid pointer to the required irradiance texture resource was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_DISTANCE_TEXTURE``
     - An invalid pointer to the required distance texture resourcewas supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_OFFSETS_TEXTURE``
     - An invalid pointer to the required offsets texture resource was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`
   * - ``ERROR_DDGI_INVALID_RESOURCE_STATES_TEXTURE``
     - An invalid pointer to the required states texture resource was supplied in :ref:`DDGIVolumeDesc <DDGI-DescribeVolume>`

.. note:: To learn more about resource management, head over to the :ref:`Describing Volume Resources <DDGI-DescribeResources>` section.

---------------------------------------------------
Macros
---------------------------------------------------

.. list-table:: RTXGI SDK Macros
   :widths: 1 3
   :align: left
   :header-rows: 1

   * - Macro Name
     - Description
   * - ``RTXGI_SAFE_RELEASE``
     - A common macro used to safely call ``Release`` on an object
   * - ``RTXGI_SAFE_DELETE``
     - A common macro used to safely delete an object allocated in heap memory
   * - ``RTXGI_SAFE_DELETE_ARRAY`` 
     - A common macro used to safely delete an array allocated in heap memory
   * - ``RTXGI_ALIGN``
     - A common macro used to clamp an input value to a specified alignment

---------------------------------------------------
Defines
---------------------------------------------------

``rtxgi-sdk/include/Defines.h`` consists of defines for use in host and device side code.

.. list-table:: RTXGI SDK Defines
   :widths: 1 4
   :align: left
   :header-rows: 1

   * - Define Name
     - Description
   * - ``RTXGI_NAME_D3D_OBJECTS``
     - When set to 1, Direct3D objects are assigned debug names using ``SetName()``.
   * - ``RTXGI_PERF_MARKERS``
     - When set to 1, PIX performance markers are inserted in GPU command lists for debugging and profiling.
   * - ``RTXGI_COORDINATE_SYSTEM_LEFT``
     - Represents a left handed, Y-up coordinate system.
   * - ``RTXGI_COORDINATE_SYSTEM_LEFT_Z_UP``
     - Represents a left handed, Z-up coordinate system. The coordinate system used by Unreal Engine.
   * - ``RTXGI_COORDINATE_SYSTEM_RIGHT``
     - Represents a right handed, Y-up coordinate system.
   * - ``RTXGI_COORDINATE_SYSTEM_RIGHT_Z_UP``
     - Represents a left handed, Z-up coordinate system. The coordinate system used by Blender.
   * - ``RTXGI_COORDINATE_SYSTEM``
     - Specifies the coordinate system to use. The chosen coordinate system must be either ``RTXGI_COORDINATE_SYSTEM_LEFT``, ``RTXGI_COORDINATE_SYSTEM_LEFT_Z_UP``, ``RTXGI_COORDINATE_SYSTEM_RIGHT``, or ``RTXGI_COORDINATE_SYSTEM_RIGHT_Z_UP``. The chosen coordinate system must match the coordinate system used for geometric assets.

---------------------------------------------------
Math
---------------------------------------------------

``rtxgi-sdk/include/Math.h`` and ``rtxgi-sdk/src/Math.cpp`` declare and implement a common set of useful operators for the types defined in ``rtxgi-sdk/include/Types.h``. The set of supported operators for each vector type are given in the following table:

.. list-table:: Operators for RTXGI Vector Types
   :widths: 1 3
   :header-rows: 1

   * - Operators
     - Implemented types
   * - ``+``, ``-``, ``==``, ``!=``
     - ``int2``, ``int3``, ``float2``, ``float3``, ``float4``
   * - ``*``, ``/``, 
     - ``int2``, ``int3``, ``float3``, ``float4``
   * - ``+=``, ``-=``, ``*=``, ``/=``
     - ``float2``, ``float3``, ``float4``

A ``Normalize`` function is also implemented for the ``float3`` vector type.

---------------------------------------------------
Random Number Generation
---------------------------------------------------

``rtxgi-sdk/include/Random.h`` and ``rtxgi-sdk/src/Random.cpp`` declare and implement basic psuedo random number generation functions for host side code using the ``srand`` and ``rand`` functions.

---------------------------------------------------
Shaders
---------------------------------------------------

``rtxgi-sdk/shaders/Common.hlsl`` defines some basic helper functions.

